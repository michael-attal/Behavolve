#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (476.0.0.508.4)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["Forest", "Nectar_spot_1"]
    def "Forest" (
        active = true
        customData = {
            float3 rotationEulerHint = (-1.5707964, 0, 0)
        }
        references = @Forest.usdc@
    )
    {
        reorder nameChildren = ["Sun", "Forest", "_materials", "Art_deco_picnic_suitcase", "Lowpoly_tree__with_random_season_", "env_light", "SkySphere"]
        quatf xformOp:orient = (0.70710677, -0.70710677, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Sun" (
            active = false
        )
        {
        }

        over "Forest"
        {
            over "Forestgroundmesh" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </Root/Forest/_materials/Ground_2> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                float3 xformOp:scale = (4, 4, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def RealityKitComponent "GroundingShadow"
                {
                    uniform token info:id = "RealityKit.GroundingShadow"
                }

                def RealityKitComponent "ImageBasedLightReceiver" (
                    active = false
                )
                {
                    rel iblEntity = </Root/Forest/SkySphere>
                    uniform token info:id = "RealityKit.ImageBasedLightReceiver"
                }
            }
        }

        over "Lowpoly_tree__with_random_season_"
        {
            over "Forest_D"
            {
                over "Plane_005" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Root/Forest/_materials/Ground_2> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    float3 xformOp:scale = (4, 4, 1)
                    float3 xformOp:translate = (-52.388603, 5.960465e-8, 0.0000026822092)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                    def RealityKitComponent "GroundingShadow"
                    {
                        bool enableIBLShadow = 0
                        bool enableMeshShadow = 0
                        uniform token info:id = "RealityKit.GroundingShadow"
                    }
                }

                over "_4K_0_8"
                {
                    over "tree_001"
                    {
                        def RealityKitComponent "GroundingShadow"
                        {
                            bool enableIBLShadow = 1
                            bool enableMeshShadow = 1
                            bool enableReceiveIBLShadow = 0
                            bool enableReceiveMeshShadow = 0
                            uniform token info:id = "RealityKit.GroundingShadow"
                        }
                    }
                }

                over "_4K_0_9"
                {
                    over "tree_001"
                    {
                        def RealityKitComponent "GroundingShadow"
                        {
                            bool enableIBLShadow = 1
                            bool enableMeshShadow = 1
                            bool enableReceiveIBLShadow = 0
                            bool enableReceiveMeshShadow = 0
                            uniform token info:id = "RealityKit.GroundingShadow"
                        }
                    }
                }

                over "_4K_0_10"
                {
                    over "tree_001"
                    {
                        def RealityKitComponent "GroundingShadow"
                        {
                            bool enableIBLShadow = 1
                            bool enableMeshShadow = 1
                            bool enableReceiveIBLShadow = 0
                            bool enableReceiveMeshShadow = 0
                            uniform token info:id = "RealityKit.GroundingShadow"
                        }
                    }
                }

                over "_4K_0_11"
                {
                    over "tree_001"
                    {
                        def RealityKitComponent "GroundingShadow"
                        {
                            bool enableIBLShadow = 1
                            bool enableMeshShadow = 1
                            bool enableReceiveIBLShadow = 0
                            bool enableReceiveMeshShadow = 0
                            uniform token info:id = "RealityKit.GroundingShadow"
                        }
                    }
                }

                over "_4K_0_12"
                {
                    over "tree_001"
                    {
                        def RealityKitComponent "GroundingShadow"
                        {
                            bool enableIBLShadow = 1
                            bool enableMeshShadow = 1
                            bool enableReceiveIBLShadow = 0
                            bool enableReceiveMeshShadow = 0
                            uniform token info:id = "RealityKit.GroundingShadow"
                        }
                    }
                }

                over "_4K_0_13"
                {
                    over "tree_001"
                    {
                        def RealityKitComponent "GroundingShadow"
                        {
                            bool enableIBLShadow = 1
                            bool enableMeshShadow = 1
                            bool enableReceiveIBLShadow = 0
                            bool enableReceiveMeshShadow = 0
                            uniform token info:id = "RealityKit.GroundingShadow"
                        }
                    }
                }

                over "_4K_0_14"
                {
                    over "tree_001"
                    {
                        def RealityKitComponent "GroundingShadow"
                        {
                            bool enableIBLShadow = 1
                            bool enableMeshShadow = 1
                            bool enableReceiveIBLShadow = 0
                            bool enableReceiveMeshShadow = 0
                            uniform token info:id = "RealityKit.GroundingShadow"
                        }
                    }
                }

                over "_4K_0_15"
                {
                    over "tree_001"
                    {
                        def RealityKitComponent "GroundingShadow"
                        {
                            bool enableIBLShadow = 1
                            bool enableMeshShadow = 1
                            bool enableReceiveIBLShadow = 0
                            bool enableReceiveMeshShadow = 0
                            uniform token info:id = "RealityKit.GroundingShadow"
                        }
                    }
                }

                over "_4K_0_16"
                {
                    over "tree_001"
                    {
                        def RealityKitComponent "GroundingShadow"
                        {
                            bool enableIBLShadow = 1
                            bool enableMeshShadow = 1
                            bool enableReceiveIBLShadow = 0
                            bool enableReceiveMeshShadow = 0
                            uniform token info:id = "RealityKit.GroundingShadow"
                        }
                    }
                }

                over "_4K_0_17"
                {
                    over "tree_001"
                    {
                        def RealityKitComponent "GroundingShadow"
                        {
                            bool enableIBLShadow = 1
                            bool enableMeshShadow = 1
                            bool enableReceiveIBLShadow = 0
                            bool enableReceiveMeshShadow = 0
                            uniform token info:id = "RealityKit.GroundingShadow"
                        }
                    }
                }

                over "_4K_0_18"
                {
                    over "tree_001"
                    {
                        def RealityKitComponent "GroundingShadow"
                        {
                            bool enableIBLShadow = 1
                            bool enableMeshShadow = 1
                            bool enableReceiveIBLShadow = 0
                            bool enableReceiveMeshShadow = 0
                            uniform token info:id = "RealityKit.GroundingShadow"
                        }
                    }
                }

                over "_4K_0_19"
                {
                    over "tree_001"
                    {
                        def RealityKitComponent "GroundingShadow"
                        {
                            bool enableIBLShadow = 1
                            bool enableMeshShadow = 1
                            bool enableReceiveIBLShadow = 0
                            bool enableReceiveMeshShadow = 0
                            uniform token info:id = "RealityKit.GroundingShadow"
                        }
                    }
                }

                over "_4K_0_6"
                {
                    over "tree_001"
                    {
                        def RealityKitComponent "GroundingShadow"
                        {
                            bool enableIBLShadow = 1
                            bool enableMeshShadow = 1
                            bool enableReceiveIBLShadow = 0
                            bool enableReceiveMeshShadow = 0
                            uniform token info:id = "RealityKit.GroundingShadow"
                        }
                    }
                }
            }

            over "_4K"
            {
                over "tree_001"
                {
                    def RealityKitComponent "GroundingShadow"
                    {
                        bool enableIBLShadow = 1
                        bool enableMeshShadow = 1
                        bool enableReceiveIBLShadow = 0
                        bool enableReceiveMeshShadow = 0
                        uniform token info:id = "RealityKit.GroundingShadow"
                    }
                }
            }
        }

        over "_materials"
        {
            reorder nameChildren = ["forestground", "runa_wolldeckeg", "leder_gr__n", "koffer_innen_futter_rot_grau", "Gumi", "Material_004", "Ceramic_Glazed", "Withe_001", "Garn_003", "Material_006", "koffer_innen_futter_blau__grau", "hammerschlag", "Metall", "BESTECK", "Ceramic_Glazed_Textur", "Ground", "Bark", "SimpleProceduralLeaf", "SimpleProceduralLeaf_1", "Ground_2"]
            over "forestground"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 110.5)
            }

            over "SimpleProceduralLeaf"
            {
                token outputs:mtlx:surface.connect = </Root/Forest/_materials/SimpleProceduralLeaf/PBRSurface_1.outputs:out>
                token outputs:realitykit:vertex.connect = None
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:mtlx:surface"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (2420.2097, -528.64905)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 314

                def Shader "Time_1" (
                    references = </Root/Forest/_materials/SimpleProceduralLeaf/Time_1>
                )
                {
                    uniform token info:id = "ND_time_float"
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (1256.0198, -151.98671)
                    int ui:nodegraph:node:stackingOrder = 332
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
                }

                def Shader "Image_8" (
                    references = </Root/Forest/_materials/SimpleProceduralLeaf/Image_8>
                )
                {
                    uniform token info:id = "ND_image_float"
                    asset inputs:file = @textures/Trees/Leaf/maple_leaf_pattern_metal_03_ambientOcclusion.png@
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (864.5706, -116.3578)
                    int ui:nodegraph:node:stackingOrder = 332
                }

                def Shader "Image_9" (
                    references = </Root/Forest/_materials/SimpleProceduralLeaf/Image_9>
                )
                {
                    uniform token info:id = "ND_image_color3"
                    asset inputs:file = @textures/Trees/Leaf/maple_leaf_pattern_metal_03_basecolor.png@
                    color3f outputs:out
                    float2 ui:nodegraph:node:pos = (866.4183, -956.89685)
                    int ui:nodegraph:node:stackingOrder = 332
                }

                def Shader "Multiply_3" (
                    references = </Root/Forest/_materials/SimpleProceduralLeaf/Multiply_3>
                )
                {
                    uniform token info:id = "ND_multiply_float"
                    float inputs:in1.connect = </Root/Forest/_materials/SimpleProceduralLeaf/Time_1.outputs:out>
                    float inputs:in2.connect = </Root/Forest/_materials/SimpleProceduralLeaf/ConstantFloat_1.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (1338.6995, -319.3578)
                    int ui:nodegraph:node:stackingOrder = 332
                }

                def Shader "GeometryModifier_1" (
                    references = </Root/Forest/_materials/SimpleProceduralLeaf/GeometryModifier_1>
                )
                {
                    uniform token info:id = "ND_realitykit_geometrymodifier_2_0_vertexshader"
                    color4f inputs:color
                    float3 inputs:modelPositionOffset.connect = </Root/Forest/_materials/SimpleProceduralLeaf/Combine3_1.outputs:out>
                    float3 inputs:normal
                    float4 inputs:uv6
                    float4 inputs:uv7
                    token outputs:out
                    float2 ui:nodegraph:node:pos = (1933.1562, -290.8521)
                    int ui:nodegraph:node:stackingOrder = 332
                }

                def Shader "Image_5" (
                    references = </Root/Forest/_materials/SimpleProceduralLeaf/Image_5>
                )
                {
                    uniform token info:id = "ND_image_vector3"
                    asset inputs:file = @textures/Trees/Leaf/maple_leaf_pattern_metal_03_normal.png@
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (626.28156, -871.9203)
                    int ui:nodegraph:node:stackingOrder = 332
                }

                def Shader "Combine3_1" (
                    references = </Root/Forest/_materials/SimpleProceduralLeaf/Combine3_1>
                )
                {
                    uniform token info:id = "ND_combine3_vector3"
                    float inputs:in1
                    float inputs:in2.connect = </Root/Forest/_materials/SimpleProceduralLeaf/Multiply_2.outputs:out>
                    float inputs:in3
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (1651.5012, -361.9815)
                    int ui:nodegraph:node:stackingOrder = 332
                }

                def Shader "Sin_1" (
                    references = </Root/Forest/_materials/SimpleProceduralLeaf/Sin_1>
                )
                {
                    uniform token info:id = "ND_sin_float"
                    float inputs:in.connect = </Root/Forest/_materials/SimpleProceduralLeaf/Multiply_3.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (1416.8088, -235.47499)
                    int ui:nodegraph:node:stackingOrder = 332
                }

                def Shader "ConstantFloat_1" (
                    references = </Root/Forest/_materials/SimpleProceduralLeaf/ConstantFloat_1>
                )
                {
                    uniform token info:id = "ND_constant_float"
                    float inputs:value = 0.1
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (1375.0002, -406.97107)
                    int ui:nodegraph:node:stackingOrder = 332
                }

                def Shader "Image_7" (
                    references = </Root/Forest/_materials/SimpleProceduralLeaf/Image_7>
                )
                {
                    uniform token info:id = "ND_image_float"
                    asset inputs:file = @textures/Trees/Leaf/maple_leaf_pattern_metal_03_roughness.png@
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (620.14484, -453.9984)
                    int ui:nodegraph:node:stackingOrder = 332
                }

                def Shader "Multiply_2" (
                    references = </Root/Forest/_materials/SimpleProceduralLeaf/Multiply_2>
                )
                {
                    uniform token info:id = "ND_multiply_float"
                    float inputs:in1.connect = </Root/Forest/_materials/SimpleProceduralLeaf/Sin_1.outputs:out>
                    float inputs:in2 = 0.05
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (1588.0706, -213.66249)
                    int ui:nodegraph:node:stackingOrder = 332
                }

                def Shader "PBRSurface_1" (
                    references = </Root/Forest/_materials/SimpleProceduralLeaf/PBRSurface_1>
                )
                {
                    uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                    float inputs:ambientOcclusion.connect = </Root/Forest/_materials/SimpleProceduralLeaf/Image_8.outputs:out>
                    color3f inputs:baseColor.connect = </Root/Forest/_materials/SimpleProceduralLeaf/Image_9.outputs:out>
                    float inputs:clearcoat
                    float inputs:clearcoatRoughness
                    color3f inputs:emissiveColor.connect = None
                    bool inputs:hasPremultipliedAlpha
                    float inputs:metallic.connect = </Root/Forest/_materials/SimpleProceduralLeaf/Image_6.outputs:out>
                    float3 inputs:normal.connect = </Root/Forest/_materials/SimpleProceduralLeaf/Image_5.outputs:out>
                    float inputs:opacity
                    float inputs:opacityThreshold
                    float inputs:roughness.connect = </Root/Forest/_materials/SimpleProceduralLeaf/Image_7.outputs:out>
                    float inputs:specular
                    token outputs:out
                    float2 ui:nodegraph:node:pos = (1434.9724, -642.1326)
                    int ui:nodegraph:node:stackingOrder = 332
                }

                def Shader "PreviewSurface_1" (
                    references = </Root/Forest/_materials/SimpleProceduralLeaf/PreviewSurface_1>
                )
                {
                    uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                    color3f inputs:diffuseColor.connect = None
                    float inputs:roughness
                    token outputs:out
                    float2 ui:nodegraph:node:pos = (1527.5042, -975.8187)
                    int ui:nodegraph:node:stackingOrder = 332
                }

                def Shader "Image_6" (
                    references = </Root/Forest/_materials/SimpleProceduralLeaf/Image_6>
                )
                {
                    uniform token info:id = "ND_image_float"
                    asset inputs:file = @textures/Trees/Leaf/maple_leaf_pattern_metal_03_metallic.png@
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (398.2738, -249.94374)
                    int ui:nodegraph:node:stackingOrder = 332
                }
            }

            over "Bark"
            {
                token outputs:mtlx:surface.connect = </Root/Forest/_materials/Bark/PBRSurface.outputs:out>
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/Forest/_materials/Bark/Principled_BSDF.outputs:surface>
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:realitykit:vertex"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (145.08203, 122.25391)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 81

                over "Principled_BSDF" (
                    active = false
                )
                {
                }

                def Shader "Image"
                {
                    uniform token info:id = "ND_image_color3"
                    asset inputs:file = @textures/Trees/Bark/bark_brown_02_diff_4k.jpg@
                    string inputs:filtertype
                    string inputs:vaddressmode
                    color3f outputs:out
                    float2 ui:nodegraph:node:pos = (-637.237, -309.4283)
                    int ui:nodegraph:node:stackingOrder = 82
                }

                def Shader "Image_3"
                {
                    uniform token info:id = "ND_image_float"
                    asset inputs:file = @textures/Trees/Bark/bark_brown_02_rough_4k.jpg@
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (-928.47394, -53.30665)
                    int ui:nodegraph:node:stackingOrder = 96
                }

                def Shader "PBRSurface"
                {
                    uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                    float inputs:ambientOcclusion
                    color3f inputs:baseColor.connect = </Root/Forest/_materials/Bark/Image.outputs:out>
                    float3 inputs:clearcoatNormal
                    color3f inputs:emissiveColor.connect = None
                    bool inputs:hasPremultipliedAlpha
                    float inputs:metallic
                    float3 inputs:normal
                    float inputs:roughness.connect = </Root/Forest/_materials/Bark/Image_3.outputs:out>
                    float inputs:specular
                    token outputs:out
                    float2 ui:nodegraph:node:pos = (-264.23828, 439.92188)
                    int ui:nodegraph:node:stackingOrder = 78
                }
            }

            over "Ground"
            {
                token inputs:frame:stPrimvarName = "st" (
                    customData = {
                        dictionary realitykit = {
                            bool hide = 1
                        }
                    }
                )
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 110.5)

                over "Principled_BSDF"
                {
                    color3f inputs:diffuseColor.connect = </Root/Forest/_materials/Ground/diffuseColor.outputs:rgb>
                    normal3f inputs:normal.connect = </Root/Forest/_materials/Ground/normal.outputs:rgb>
                    float inputs:roughness.connect = </Root/Forest/_materials/Ground/roughness.outputs:r>
                }

                def Shader "diffuseColor"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @textures/Trees/forrest_ground_01_diff_2k.jpg@
                    float2 inputs:st.connect = </Root/Forest/_materials/Ground/diffuseColor/TexCoordReader.outputs:result>
                    color3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/Forest/_materials/Ground.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }

                def Shader "roughness"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @textures/Trees/forrest_ground_01_rough_2k.jpg@
                    float2 inputs:st.connect = </Root/Forest/_materials/Ground/roughness/TexCoordReader.outputs:result>
                    float outputs:r

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/Forest/_materials/Ground.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }

                def Shader "normal"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @textures/Trees/forrest_ground_01_nor_2k.jpg@
                    float2 inputs:st.connect = </Root/Forest/_materials/Ground/normal/TexCoordReader.outputs:result>
                    normal3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/Forest/_materials/Ground.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }
            }

            def Material "SimpleProceduralLeaf_1" (
                references = </Root/Forest/_materials/SimpleProceduralLeaf>
            )
            {
                token outputs:mtlx:surface.connect = </Root/Forest/_materials/SimpleProceduralLeaf_1/PBRSurface_1.outputs:out>
                token outputs:realitykit:vertex.connect = </Root/Forest/_materials/SimpleProceduralLeaf_1/GeometryModifier_1.outputs:out>
                float2 ui:nodegraph:node:pos = (628.78107, -8.722656)
                int ui:nodegraph:node:stackingOrder = 1
                custom string userProperties:blender:data_name = "SimpleProceduralLeaf"

                over "Image_3" (
                    active = false
                )
                {
                    int ui:nodegraph:node:stackingOrder = 295
                }

                over "Image_4" (
                    active = false
                )
                {
                    int ui:nodegraph:node:stackingOrder = 295
                }

                over "Image_2" (
                    active = false
                )
                {
                    int ui:nodegraph:node:stackingOrder = 295
                }

                over "Time" (
                    active = false
                )
                {
                    int ui:nodegraph:node:stackingOrder = 295
                }

                over "Multiply_1" (
                    active = false
                )
                {
                    float inputs:in1
                    int ui:nodegraph:node:stackingOrder = 295
                }

                over "ConstantFloat" (
                    active = false
                )
                {
                    int ui:nodegraph:node:stackingOrder = 295
                }

                over "Multiply" (
                    active = false
                )
                {
                    float inputs:in1
                    int ui:nodegraph:node:stackingOrder = 295
                }

                over "GeometryModifier" (
                    active = false
                )
                {
                    int ui:nodegraph:node:stackingOrder = 295
                }

                over "PBRSurface" (
                    active = false
                )
                {
                    float inputs:ambientOcclusion
                    color3f inputs:baseColor
                    float inputs:metallic
                    float inputs:roughness
                    int ui:nodegraph:node:stackingOrder = 295
                }

                over "PreviewSurface" (
                    active = false
                )
                {
                    int ui:nodegraph:node:stackingOrder = 295
                }

                over "Image_1" (
                    active = false
                )
                {
                    int ui:nodegraph:node:stackingOrder = 295
                }

                over "Image" (
                    active = false
                )
                {
                    int ui:nodegraph:node:stackingOrder = 295
                }

                over "Combine3" (
                    active = false
                )
                {
                    int ui:nodegraph:node:stackingOrder = 295
                }

                over "Sin" (
                    active = false
                )
                {
                    float inputs:in
                    int ui:nodegraph:node:stackingOrder = 295
                }

                def Shader "Multiply_3"
                {
                    uniform token info:id = "ND_multiply_float"
                    float inputs:in1.connect = </Root/Forest/_materials/SimpleProceduralLeaf_1/Time_1.outputs:out>
                    float inputs:in2.connect = </Root/Forest/_materials/SimpleProceduralLeaf_1/ConstantFloat_1.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (755.2955, 204.50232)
                    int ui:nodegraph:node:stackingOrder = 331
                }

                def Shader "PBRSurface_1"
                {
                    uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                    float inputs:ambientOcclusion.connect = </Root/Forest/_materials/SimpleProceduralLeaf_1/Image_8.outputs:out>
                    color3f inputs:baseColor.connect = </Root/Forest/_materials/SimpleProceduralLeaf_1/Image_9.outputs:out>
                    float inputs:clearcoat
                    float inputs:clearcoatRoughness
                    color3f inputs:emissiveColor.connect = None
                    float inputs:metallic.connect = </Root/Forest/_materials/SimpleProceduralLeaf_1/Image_6.outputs:out>
                    float3 inputs:normal.connect = </Root/Forest/_materials/SimpleProceduralLeaf_1/Image_5.outputs:out>
                    float inputs:opacity
                    float inputs:opacityThreshold
                    float inputs:roughness.connect = </Root/Forest/_materials/SimpleProceduralLeaf_1/Image_7.outputs:out>
                    float inputs:specular
                    token outputs:out
                    float2 ui:nodegraph:node:pos = (851.5684, -118.272484)
                    int ui:nodegraph:node:stackingOrder = 331
                }

                def Shader "Sin_1"
                {
                    uniform token info:id = "ND_sin_float"
                    float inputs:in.connect = </Root/Forest/_materials/SimpleProceduralLeaf_1/Multiply_3.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (833.40485, 288.38513)
                    int ui:nodegraph:node:stackingOrder = 331
                }

                def Shader "ConstantFloat_1"
                {
                    uniform token info:id = "ND_constant_float"
                    float inputs:value = 0.1
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (791.59625, 116.889046)
                    int ui:nodegraph:node:stackingOrder = 331
                }

                def Shader "Image_8"
                {
                    uniform token info:id = "ND_image_float"
                    asset inputs:file = @textures/Trees/Leaf/maple_leaf_pattern_metal_03_ambientOcclusion.png@
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (281.16656, 407.50232)
                    int ui:nodegraph:node:stackingOrder = 331
                }

                def Shader "PreviewSurface_1"
                {
                    uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                    color3f inputs:diffuseColor.connect = None
                    float inputs:roughness
                    token outputs:out
                    float2 ui:nodegraph:node:pos = (944.10016, -451.95862)
                    int ui:nodegraph:node:stackingOrder = 331
                }

                def Shader "Image_6"
                {
                    uniform token info:id = "ND_image_float"
                    asset inputs:file = @textures/Trees/Leaf/maple_leaf_pattern_metal_03_metallic.png@
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (-185.13031, 273.91638)
                    int ui:nodegraph:node:stackingOrder = 331
                }

                def Shader "Image_7"
                {
                    uniform token info:id = "ND_image_float"
                    asset inputs:file = @textures/Trees/Leaf/maple_leaf_pattern_metal_03_roughness.png@
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (36.740784, 69.8617)
                    int ui:nodegraph:node:stackingOrder = 331
                }

                def Shader "Combine3_1"
                {
                    uniform token info:id = "ND_combine3_vector3"
                    float inputs:in1
                    float inputs:in2.connect = </Root/Forest/_materials/SimpleProceduralLeaf_1/Multiply_2.outputs:out>
                    float inputs:in3
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (1068.0972, 161.87863)
                    int ui:nodegraph:node:stackingOrder = 331
                }

                def Shader "Image_5"
                {
                    uniform token info:id = "ND_image_vector3"
                    asset inputs:file = @textures/Trees/Leaf/maple_leaf_pattern_metal_03_normal.png@
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (42.877502, -348.06018)
                    int ui:nodegraph:node:stackingOrder = 331
                }

                def Shader "GeometryModifier_1"
                {
                    uniform token info:id = "ND_realitykit_geometrymodifier_2_0_vertexshader"
                    color4f inputs:color
                    float3 inputs:modelPositionOffset.connect = </Root/Forest/_materials/SimpleProceduralLeaf_1/Combine3_1.outputs:out>
                    float3 inputs:normal
                    float4 inputs:uv7
                    token outputs:out
                    float2 ui:nodegraph:node:pos = (1349.7522, 233.00803)
                    int ui:nodegraph:node:stackingOrder = 331
                }

                def Shader "Time_1"
                {
                    uniform token info:id = "ND_time_float"
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (672.6158, 371.8734)
                    int ui:nodegraph:node:stackingOrder = 331
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
                }

                def Shader "Image_9"
                {
                    uniform token info:id = "ND_image_color3"
                    asset inputs:file = @textures/Trees/Leaf/maple_leaf_pattern_metal_03_basecolor.png@
                    color3f outputs:out
                    float2 ui:nodegraph:node:pos = (283.01422, -433.03674)
                    int ui:nodegraph:node:stackingOrder = 331
                }

                def Shader "Multiply_2"
                {
                    uniform token info:id = "ND_multiply_float"
                    float inputs:in1.connect = </Root/Forest/_materials/SimpleProceduralLeaf_1/Sin_1.outputs:out>
                    float inputs:in2 = 0.05
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (1004.66656, 310.19763)
                    int ui:nodegraph:node:stackingOrder = 331
                }
            }

            def Material "Ground_2" (
                references = </Root/Forest/_materials/Ground>
            )
            {
                token outputs:mtlx:surface.connect = </Root/Forest/_materials/Ground_2/PBRSurface.outputs:out>
                token outputs:surface.connect = </Root/Forest/_materials/Ground_2/Principled_BSDF.outputs:surface>
                float2 ui:nodegraph:node:pos = (868, 372.5)
                int ui:nodegraph:node:stackingOrder = 1
                custom string userProperties:blender:data_name = "Ground"

                def Shader "Principled_BSDF" (
                    active = false
                )
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoat = 0
                    float inputs:clearcoatRoughness = 0.03
                    color3f inputs:diffuseColor.connect = None
                    color3f inputs:emissiveColor = (0, 0, 0)
                    float inputs:ior = 1.45
                    float inputs:metallic = 0
                    normal3f inputs:normal.connect = None
                    float inputs:opacity = 1
                    float inputs:roughness.connect = None
                    float inputs:specular = 0.36818182
                    token outputs:surface
                }

                def Shader "Image_Texture"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </Root/Forest/_materials/Ground_2/Mapping.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "Mapping"
                {
                    uniform token info:id = "UsdTransform2d"
                    float2 inputs:in.connect = </Root/Forest/_materials/Ground_2/uvmap.outputs:result>
                    float inputs:rotation = 0
                    float2 inputs:scale = (10, 10)
                    float2 inputs:translation = (0, 0)
                    float2 outputs:result
                }

                def Shader "uvmap"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    string inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "Image_Texture_001"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </Root/Forest/_materials/Ground_2/Mapping.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "Image_Texture_002"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, -1, -1, -1)
                    asset inputs:file
                    float4 inputs:scale = (2, 2, 2, 2)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </Root/Forest/_materials/Ground_2/Mapping.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "PBRSurface"
                {
                    uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                    float inputs:ambientOcclusion
                    color3f inputs:baseColor.connect = </Root/Forest/_materials/Ground_2/Image.outputs:out>
                    float3 inputs:clearcoatNormal
                    color3f inputs:emissiveColor
                    bool inputs:hasPremultipliedAlpha
                    float inputs:metallic
                    float3 inputs:normal.connect = </Root/Forest/_materials/Ground_2/Image_1.outputs:out>
                    float inputs:roughness.connect = </Root/Forest/_materials/Ground_2/Image_2.outputs:out>
                    float inputs:specular
                    token outputs:out
                    float2 ui:nodegraph:node:pos = (-227.26172, 50.85547)
                    int ui:nodegraph:node:stackingOrder = 1
                }

                def Shader "Image_2"
                {
                    uniform token info:id = "ND_image_float"
                    asset inputs:file = @textures/Trees/forrest_ground_01_rough_2k.jpg@
                    string inputs:filtertype
                    string inputs:uaddressmode
                    string inputs:vaddressmode
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (-564.9203, 338.0908)
                    int ui:nodegraph:node:stackingOrder = 18
                }

                def Shader "Image"
                {
                    uniform token info:id = "ND_image_color3"
                    color3f inputs:default
                    asset inputs:file = @textures/Trees/forrest_ground_01_diff_2k.jpg@
                    string inputs:filtertype = "linear"
                    float2 inputs:texcoord.connect = </Root/Forest/_materials/Ground_2/Multiply.outputs:out>
                    string inputs:uaddressmode = "periodic"
                    string inputs:vaddressmode = "periodic"
                    color3f outputs:out
                    float2 ui:nodegraph:node:pos = (-630.1449, -164.3053)
                    int ui:nodegraph:node:stackingOrder = 33
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out", "outputs:out"]
                }

                def Shader "Image_1"
                {
                    uniform token info:id = "ND_image_vector3"
                    asset inputs:file = @textures/Trees/forrest_ground_01_nor_2k.jpg@
                    string inputs:filtertype
                    string inputs:vaddressmode
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (-876.7744, 184.21208)
                    int ui:nodegraph:node:stackingOrder = 13
                }

                def Shader "TextureCoordinates"
                {
                    uniform token info:id = "ND_texcoord_vector2"
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (-1225.4648, -221.2461)
                    int ui:nodegraph:node:stackingOrder = 38
                }

                def Shader "Multiply"
                {
                    uniform token info:id = "ND_multiply_vector2"
                    float2 inputs:in1.connect = </Root/Forest/_materials/Ground_2/TextureCoordinates.outputs:out>
                    float2 inputs:in2 = (10, 10)
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (-959.47656, -211.73828)
                    int ui:nodegraph:node:stackingOrder = 43
                }
            }
        }

        over "Art_deco_picnic_suitcase"
        {
            reorder nameChildren = ["bowl_of_fruit", "runa_wolldecke", "Koffer"]
            def "bowl_of_fruit" (
                active = true
                references = @bowl-of-fruit.usdz@
            )
            {
                reorder nameChildren = ["Nectar_spot_1", "Materials", "Geometry"]
                quatf xformOp:orient = (0.69379324, 0.6937932, -0.13656856, -0.13656858)
                float3 xformOp:scale = (1, 1.0000001, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Xform "Nectar_spot_1" (
                    active = true
                )
                {
                    quatf xformOp:orient = (1, 4.8427985e-8, -1.7892179e-9, 1.618357e-9)
                    float3 xformOp:scale = (0.99999994, 0.99999994, 1)
                    float3 xformOp:translate = (-0.051383976, 0.05787449, 0.036560062)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Xform "Nectar_spot_2" (
                    active = true
                )
                {
                    float2 ui:nodegraph:node:pos = (-351.0017, 314.515)
                    int ui:nodegraph:node:stackingOrder = 1
                    quatf xformOp:orient = (0.99999994, -0.00034479093, 0.000012738629, -0.0000115221565)
                    float3 xformOp:scale = (0.99999976, 0.99999976, 0.9999998)
                    float3 xformOp:translate = (0.035787586, 0.078548305, 0.06118727)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Xform "Nectar_spot_3" (
                    active = true
                )
                {
                    float2 ui:nodegraph:node:pos = (-331.0017, 334.515)
                    int ui:nodegraph:node:stackingOrder = 2
                    quatf xformOp:orient = (0.99999994, -0.00034479087, 0.000012738628, -0.000011522159)
                    float3 xformOp:scale = (0.9999997, 0.9999997, 0.99999976)
                    float3 xformOp:translate = (0.03578568, 0.09905323, -0.04502726)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Xform "Nectar_spot_4" (
                    active = true
                )
                {
                    float2 ui:nodegraph:node:pos = (-311.0017, 354.515)
                    int ui:nodegraph:node:stackingOrder = 3
                    quatf xformOp:orient = (0.99999994, -0.00034479087, 0.000012738632, -0.000011522166)
                    float3 xformOp:scale = (0.99999964, 0.99999964, 0.9999997)
                    float3 xformOp:translate = (-0.023097994, 0.08331635, -0.04500628)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }
            }

            over "runa_wolldecke"
            {
                over "runa_wolldeckeg"
                {
                    def RealityKitComponent "GroundingShadow"
                    {
                        bool enableIBLShadow = 1
                        bool enableMeshShadow = 1
                        uniform token info:id = "RealityKit.GroundingShadow"
                    }
                }
            }
        }

        def "SkySphere" (
            active = true
            references = @../../SkySphere.usdz@
        )
        {
            quatf xformOp:orient = (0.70710677, 0.70710677, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, 0)

            over "SkySphere_mat"
            {
                asset inputs:SkySphere_Texture = @forest_hdri.exr@
            }

            def RealityKitComponent "ImageBasedLight"
            {
                asset ibl = @forest_hdri.exr@
                uniform token info:id = "RealityKit.ImageBasedLight"
                float intensityExponent = -1
                bool isGlobalIBL = 0
            }
        }
    }
}

